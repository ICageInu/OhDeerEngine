first make some components to make all of this work
cause right now it's gameobject based
components have been implemented, gameobject is final just to make sure I can't inherit from it

on another related note thought, right, make scene final or not? I guess it's a good challenge to do so

//question to tom
so I actually got a question that I can't seem to find
gameobjects need to be final, deal
does the scene have to be final as well? or are we allowed to have scene specific updates?
reason I'm asking is then I can not bind callbacks to the input manager and just question if button is pressed or not in the scene specific update

//toms answer to my question

Is inheritance the only way you can add functionality to a scene?
(Rhetorical question)
I donâ€™t really understand your problem though - 
I can see how for SOME games with tremendously different stages you would have scene specific update managers, but not for a  simple game like digger.,
Does that mean you will select your scene object depending on the level file you read in?
The idea in itself is interesting though I look forward to how you did it.
To get back to the technical aspect of your question - since we prefer composition over inheritance, 
why not have an update SceneComponent for your scene


rendercomponent - this is same - texture component
textcomponent



sooooo ruben is a beast and helped me do sprite animations, letsagoo
msperupdate = value we want each update to update by


textcomponent: what am I actually trying to do, make it so that once you load a texture, it is in memory and you can find it again
made an fps component that literally does what the name says, easy to call and everything
sooooooo after adding a collision component, I found out that there is something naice going on, the collision boxes are being drawn at 
the wrong position in comparision to the textures, now just to figure out
the weird part is: the collision component places itself at the position of the gameobject
the rendercomponent takes the gameobject position as well
so the collision component needs to be inverting it's y position???
after a little bit of looking around I fixed the collision boxes and the drawing of the texture


lets remake the resourcemanager, cause right now it's a resourceloader
 - sound in resourcemanager


//=============inputmanager
so each player has a set amount of commands with both keyboard and controller
each player checks for his own input at update
meaning each player has an container of commands and then asks the inputmanager if they're pressed or now
I do not like the command pattern in the way that is presented, if possibnle I'd just love to actually bind the callback to the buttons
but OH WELL, right now need to figure out a way if the player is actually controlelr supported or keyboard supported
need to save the keys for the player as well, just to make sure that I'm not confusing the controlls of the players
honestly not sure how to tackle this, so gonna leave it for now



//================states shenanigans
alright so we got multiple state that we can update depending on the buttons and actions being done
so right now we can make it so that if moving we get to the state moving and that will change the texture for the different character components
will also do the movement so that's also not aprt there anymore
 
so states we have:
idle: not doing anything
moving: will take care of the texture as well making sure that that one is solid
do I want different states for the movement direction?
do I want this state to tell me the inputs?
do I want this state to influence the character or do I call on the state from the character
I feel like the last one is the better option:
SO: in the character we will check for inputs
and we will change the state based on that
we will have one moving state but the moving state will be able to influence the texture of the charcomponent
so we need to pass a reference towards the texture in there
I have no clue how to implement the state pattern,
so for now I'm ignoring it as it will only make the character more complicated and I honestly cannot use that right now
 
 
 //==========observer pattern
 so here we're gonna use this pattern in a couple cases: score and health wise
 right now we set up the base observer nice and easy, but I'm gonna make the healthobserver and the score observer part of the engine
 this seems fair as most games will have something in that sense I presume, and if not you can just leave it out
 so right now I'm adding the observers to a vector of the scene, the question now is how do I bring them over
 cause they shouldn't have any update whatsoever
 think I might just make a ui shenanigans for all scenes and bring over the values of said observers
 
 
//======== enemies
for the enemies I want them to move in the straightest line possible towards the player
the nobbins move only through predefined hallways
the hobbins make their own hallways


first make the landscape maybe




//======= terrain

 
 
needed for game:
 - score
	-> saving of scores
 - lifes
 - enemy behaviour
 - destructable map
 - pickups -> collision
 - level loader
 - reading of info files
 - input manager -> controller support -> this might be working already
